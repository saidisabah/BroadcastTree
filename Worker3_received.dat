import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
import java.io.*;
import java.net.*;

public class Worker {
    private static final int MASTER_PORT = 5000;
    private static final String OUTPUT_FILE = "received_file_worker.dat";
    private static final int BUFFER_SIZE = 4096;

    public static void main(String[] args) {
        try {
            // Cr√©ation d'un serveur socket avec un port dynamique
            ServerSocket workerServer = new ServerSocket(0); // Port dynamique
            int workerPort = workerServer.getLocalPort();
            String workerIP = InetAddress.getLocalHost().getHostAddress();

            // Informer le Master de son port dynamique
            try (Socket masterSocket = new Socket("localhost", MASTER_PORT);
                 PrintWriter writer = new PrintWriter(masterSocket.getOutputStream(), true)) {
                writer.println(workerIP + ":" + workerPort);
                System.out.println("üì° Annonce envoy√©e au Master : " + workerIP + ":" + workerPort);
            }

            // Attendre la connexion du Master
            System.out.println("üïê Worker en attente du Master sur le port dynamique " + workerPort + "...");
            Socket socket = workerServer.accept();
            System.out.println("üîó Connexion avec le Master √©tablie. R√©ception du fichier...\n");

            receiveFile(socket);

            // Fermer les connexions
            socket.close();
            workerServer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void receiveFile(Socket socket) throws IOException {
        InputStream is = socket.getInputStream();
        FileOutputStream fos = new FileOutputStream(OUTPUT_FILE);
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead;
        int blockNumber = 1;
        boolean receivedData = false;

        while ((bytesRead = is.read(buffer)) != -1) {
            fos.write(buffer, 0, bytesRead);
            fos.flush();
            System.out.println("üì• Bloc " + blockNumber + " re√ßu (" + bytesRead + " octets)");
            writer.println("ACK " + blockNumber);
            receivedData = true;
            blockNumber++;
        }

        fos.close();

        if (receivedData) {
            System.out.println("\n‚úÖ Fichier re√ßu et sauvegard√© sous " + OUTPUT_FILE);
            writer.println("ACK");
            System.out.println("‚úÖ Accus√© de r√©ception envoy√© au Master\n");
        } else {
            System.out.println("‚ùå Erreur : Aucun fichier re√ßu !");
        }
    }
}
hello sabah
